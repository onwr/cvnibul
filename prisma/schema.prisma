// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  cv            CV?
  accounts      Account[]
  sessions      Session[]
  photoApprovals PhotoApproval[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CV {
  id          String   @id @default(uuid())
  userId      String   @unique
  slug        String   @unique
  
  // Kişisel Bilgiler
  ad          String
  soyad       String
  email       String?
  telefon     String?
  adres       String?
  dogumTarihi String?
  meslek      String?
  
  // Konum
  haritaLat   Float?
  haritaLng   Float?
  
  // Profil & İçerik
  profilFoto  String?
  hayatHikayesi String? @db.Text
  
  // Form Data (JSON)
  formData    Json
  
  // Customization
  customization Json
  
  // Şablon
  templateId  String   @default("hero")
  
  // Status
  isPublished Boolean  @default(false)
  isActive    Boolean  @default(true)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  
  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  
  @@index([slug])
  @@index([userId])
  @@index([isPublished])
}

model Appointment {
  id          String   @id @default(uuid())
  cvId        String
  serviceId   String?
  serviceName String
  
  // Randevu Bilgileri
  appointmentDate DateTime
  
  // Müşteri Bilgileri
  customerName    String
  customerSurname String
  customerPhone   String
  customerEmail   String?
  notes           String? @db.Text
  
  // Status
  status      String   @default("pending")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  cv          CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  @@index([cvId])
  @@index([appointmentDate])
  @@index([status])
}

model PhotoApproval {
  id          String   @id @default(uuid())
  photoId     String
  photoUrl    String
  userId      String
  userName    String
  
  // Onay Bilgileri
  approvedBy  String?
  approvedAt  DateTime?
  status      String   @default("pending") // pending, approved, rejected
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}
